var db = require('../db');

//dep
var GroupSchemaOriginal = new db.Schema({
	groupName : String,
    events : [ 
		    {
				eventName: String,
				eventCreator: String,
    			completed: Boolean,
    			options:[
				   {
					optionName: String,
    				betters: [
						     {
							  	betterName: String,
    							betterAddress: String,
    							betterAmount: Number
						     }
						 ],
  					winner: Boolean
				    }
				],
    			messages: [
				      {
					   messageFrom: String,
					   messageText: String
			 	      }
				  ]
		    }
		 ]
});
var MyGroupOriginal = db.mongoose.model('GroupOriginal', GroupSchemaOriginal);

var GroupSchema = new db.Schema({
	groupName: String,
	events: [{identifier:String}]
});
var MyGroup = db.mongoose.model('Group', GroupSchema);

var EventSchema = new db.Schema({
	eventName: String,
	eventCreator:String,
	options: [{identifier:String}],
	messages: [{identifier:String}],
	winner: String
});
var MyEvent = db.mongoose.model('Event', EventSchema);

var OptionSchema = new db.Schema({
	optionName:String,
	betters:[{identifier:String}],
});
var MyOption = db.mongoose.model('Option', OptionSchema);

var BetterSchema = new db.Schema({
	betterName:String,
	betterAddress:String,
	betterAmount:Number
});
var MyBetter = db.mongoose.model('Better', BetterSchema);

var MessageSchema = new db.Schema({
	from:String,
	content:String
});

exports.addGroup = function(groupName, callback){
	var instance = new MyGroup();
	instance.groupName = groupName;
	instance.events = [];
	instance.save(function (err) {
		if (err) {
			console.err;
		}else{
			callback(null, instance);
		}
	});
}

var optionNumber=0;
exports.addEvent = function addEventFunction(groupName, eventName, eventCreator, options, callback){
	if (optionNumber<options.length){
	var optionsInstance = [];
	for (var i=0; i<options.length; i++){
		optionsInstance[i] = new MyOption();
		optionsInstance[i].optionName = options[i];
		optionsInstance[i].betters = [];
	}
	console.log(optionsInstance);
	optionsInstance[optionNumber].save(function(err){
		if (err){
			console.err;
		}else{
			optionNumber++;
			addEventFunction(groupName, eventName, eventCreator, options, callback);
			if (optionNumber==0){
			var eventInstance = new MyEvent();
			eventInstance.eventName = eventName;
			eventInstance.eventCreator = eventCreator;
			for (var i = 0; i<options.length; i++){
				eventInstance.options[i]=optionsInstance[i]._id;
			}
			console.log(eventInstance.options);
			eventInstance.messages = [];
			eventInstance.save(function(err){
				if (err){
					console.err;
				}else{
					MyGroup.update({groupName: groupName}, 
						{$push: {'events': {
								eventName: eventInstance._id,
							} }
					}, function (err,group){
						if (err){
							console.err;
						}else{
							callback(null,eventInstance)
						}
					});
				}
			});
		}
		}
	});
	}	
}

/*
//dep
exports.addEvent1 = function(groupName, eventName, eventCreator, options, callback){
	MyGroup.update({groupName: groupName}, 
		{$push: {'events': {
				eventName: eventName,
				eventCreator: eventCreator,
				completed: false,
				options: [],
				messages: []
			} }
	}, function(err,group){
		if (err) {
			console.err;
		}else{
			callback(null, group);
		}
	});
}

//dep
exports.addEvent2 = function(groupName, eventName, eventCreator, team, callback){
	MyGroup.update({'events.eventName': eventName}, 
		{$push: {'options': {
			'teamName': team
		}}
	}, function(err,group){
		if (err) {
			console.err;
		}else{
			callback(null, group);
		}
	});
}
*/
exports.addBet = function(groupName, eventName, betterName, betterAddress, betterAmount, teamName, callback){
	MyGroup.update({'events.eventName':eventName}/*{events: {$elemMatch: {'groupName':groupName, 'events.eventName':eventName, 'events.options.teamName':teamName}}}*/,
		{$push: {events/*'events.options.betters'*/: {
			betterName: betterName,
			betterAddress: betterAddress,
			betterAmount: betterAmount
			}
		}},
		function(err,updatedDoc){
			if (err) {
				console.log('kno');
				callback(err);
			}else{
				console.log('k');
				callback(null,updatedDoc);
			}
		});
}
